"use client";
// import type { Metadata } from "next";
import localFont from "next/font/local";
import { MantineProvider } from "@mantine/core"; // Import MantineProvider
import { MSWProvider } from "./msw-provider";
import "./globals.css";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import '@mantine/core/styles.css';


const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata: Metadata = {
//   title: "Todo App",
//   description: "Generated by create next app",
// };

// Enable server-side mocking
// if (process.env.NEXT_RUNTIME === "nodejs") {
//   const { server } = require("../mocks/server");
//   server.listen();
// }
const queryClient = new QueryClient();

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {/* Wrap MantineProvider around MSWProvider */}
        <MantineProvider>
          
        <QueryClientProvider client={queryClient}>
            {/* Enable client-side mocking */}
            <MSWProvider>{children}</MSWProvider>
            {/* React Query Devtools */}
            <ReactQueryDevtools initialIsOpen={true} />
          </QueryClientProvider>
         
        </MantineProvider>
      </body>
    </html>
  );
}
